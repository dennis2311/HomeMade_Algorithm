import itertools
all_candidates = []
case_candidates = []

class Candidates():
    def __init__(self, clue):
        self.num = clue[0]
        self.strike_count = clue[1]
        self.ball_count = clue[2]
        self.separated_num = self.separate(self.num)
        self.strike_combination(self.separated_num, self.strike_count, self.ball_count)
        self.copied_cases = case_candidates[:]
        all_candidates.append(self.copied_cases)

    def separate(self, num):
        alpha_num = str(num)
        separated_num = []
        for num in alpha_num:
            separated_num.append([int(num), 2-alpha_num.index(num)])
        return separated_num

    def strike_combination(self, separated_num, strike_count, ball_count):
        used_num = []
        for num in separated_num:
            used_num.append(num[0])

        if strike_count == 0:
            self.ball_combination(used_num, separated_num, [[]], ball_count)
        else:
            strike_use = self.caseExtracter(separated_num, strike_count, 0, [])
            left_num = []
            for strike in strike_use:
                copied_num = separated_num[:]
                for case in strike:
                    copied_num.remove(case)
                left_num.append(copied_num)

            i = 0
            while i < len(strike_use):
                self.ball_combination(used_num, left_num[i], strike_use[i], ball_count)
                i+=1

    def ball_combination(self, used_num, separated_num, strikes, ball_count):
        if ball_count == 0:
            use_num = []
            for strike in strikes:
                use_num.append(strike[0])
            except_num = list(set(used_num)-set(use_num))
            case_candidates.append([use_num, except_num, strikes, [[]]])

        else:
            ball_use = self.caseExtracter(separated_num, ball_count, 0, [])
            for balls in ball_use:
                left_num = []
                copied_num = separated_num[:]
                for ball in balls:
                    copied_num.remove(ball)
                left_num.append(copied_num)

                except_num = []
                except_nums = left_num[0]
                for excepts in except_nums:
                    except_num.append(excepts[0])
                use_num = list(set(used_num)-set(except_num))
                case_candidates.append([use_num, except_num, strikes, balls])

    def caseExtracter(self, numberArr, n, startingPoint, previousNum):
        allCases = []

        def case_Extracter(numberArr, n, startingPoint, previousArr):
            if n == 1:
                for i in range(startingPoint, len(numberArr)):  # n = 1 인 경우 미리 선택된 previous numbers 에 남은 원소들을 하나씩 붙임
                    previous_arr = previousArr.copy()
                    previous_arr.extend([numberArr[i]])
                    allCases.append(previous_arr)

            else:
                for i in range(startingPoint, len(
                        numberArr)):  # n > 1 인 경우 하나를 골라 previous numbers 에 할당해준 후 starting point 를 하나 증가시키고 (복원추출 방지)
                    previous_arr = previousArr.copy()  # n 에서 1 을 빼고 재귀함수로 실행
                    previous_arr.extend([numberArr[i]])
                    case_Extracter(numberArr, n - 1, i + 1, previous_arr)

        case_Extracter(numberArr, n, startingPoint, previousNum)
        return allCases

def is_match(clue1, clue2):
    if len(list(set(clue1[0]) & set(clue2[1]))) > 0:  # use_num이 except_num에 있는가?
        return False
    elif len(list(set(clue1[1]) & set(clue2[0]))) > 0:  # except_num이 use_num에 있는가?
        return False
    elif is_strike_ball_cross(clue1, clue2):  # strike여야 하는 숫자가 ball에, ball이어야 하는 숫자가 strike에 있지는 않은가?
        return False
    elif not is_strike_match(clue1, clue2):  # strike 끼리 충돌하지는 않는가?
        return False
    elif not is_ball_can_get_in(clue1, clue2):
        return False
    else:
        return True

def is_strike_ball_cross(clue1, clue2):
    clue1_strikes = clue1[2]
    clue2_strikes = clue2[2]
    clue1_balls = clue1[3]
    clue2_balls = clue2[3]
    for strike1 in clue1_strikes:
        if len(strike1) == 0:
            continue
        else:
            if clue2_balls.count(strike1):
                return True
    for ball1 in clue1_balls:
        if len(ball1) == 0:
            continue
        else:
            if clue2_strikes.count(ball1):
                return True
    return False

def is_strike_match(clue1, clue2):
    dist = 0
    clue1_strikes = clue1[2]
    clue2_strikes = clue2[2]
    if len(clue1_strikes[0]) == 0:
        return True
    if len(clue2_strikes[0]) == 0:
        return True

    for strike1 in clue1_strikes:
        strike_num1 = strike1[0]
        for strike2 in clue2_strikes:
            strike_num2 = strike2[0]
            if strike_num1 == strike_num2:
                if strike1[1] == strike2[1]:
                    pass
                else:
                    dist += 1
            else:
                if strike1[1] == strike2[1]:
                    dist += 1
                else:
                    pass

    if dist == 0:
        return True
    else:
        return False

def is_ball_can_get_in(clue1, clue2):
    clue1_strikes = clue1[2]
    strike_position = []
    for strike in clue1_strikes:
        if len(strike) != 0:
            strike_position.append(strike[1])
    return False

def trim(some_list):
    trimmed_list = []
    for var in some_list:
        if trimmed_list.count(var) == 0:
            trimmed_list.append(var)
    return trimmed_list

def merge(clue1, clue2):
    new_clue = []
    new_clue.append(list(set(clue1[0]) | set(clue2[0])))
    new_clue.append(list(set(clue1[1]) | set(clue2[1])))
    new_clue_strikes = []
    new_clue_strikes.extend(clue1[2])
    new_clue_strikes.extend(clue2[2])
    new_clue.append(trim(new_clue_strikes))
    new_clue_balls = []
    new_clue_balls.extend(clue1[3])
    new_clue_balls.extend(clue2[3])
    new_clue.append(trim(new_clue_balls))
    return new_clue

def make_final_candidates(finalcandidates, allcandidates, index):
    final_candidates = []

    if index == 1:
        for candidate_first in allcandidates[0]:
            for candidate_index in allcandidates[1]:
                if is_match(candidate_first, candidate_index):
                    final_candidates.append(merge(candidate_first, candidate_index))
        final = final_candidates[:]
        return make_final_candidates(final, allcandidates, index+1)

    elif index < len(allcandidates)-1:
        for candidate_final in finalcandidates:
            for candidate_index in allcandidates[index]:
                if is_match(candidate_final, candidate_index):
                    final_candidates.append(merge(candidate_final, candidate_index))
        final = final_candidates[:]
        return make_final_candidates(final, allcandidates, index+1)

    else:  # index == len(allcandidates)-1
        for candidate_final in finalcandidates:
            for candidate_last in allcandidates[index]:
                if is_match(candidate_final, candidate_last):
                    final_candidates.append(merge(candidate_final, candidate_last))
        final = final_candidates[:]
        return final

def solution(baseball):
    for clue in baseball:
        case_candidates.clear()
        Candidates(clue)
    # for candidate in all_candidates:
    #     print(candidate)
    result1 = []
    for candidate0 in all_candidates[0]:
        print(candidate0)
        for candidate1 in all_candidates[1]:
            print(candidate1)
            if is_match(candidate0, candidate1):
                result1.append(merge(candidate0, candidate1))
    print(result1)
    print(len(result1))
    print("-----------------------------")
    result2 = []
    for candidate_re1 in result1:
        print(candidate_re1)
        for candidate2 in all_candidates[2]:
            print(candidate2)
            if is_match(candidate_re1, candidate2):
                result2.append(merge(candidate_re1, candidate2))
    print(result2)
    print(len(result2))
    print("-----------------------------")
    result3 = []
    for candidate_re2 in result2:
        print(candidate_re2)
        for candidate3 in all_candidates[3]:
            print(candidate3)
            if is_match(candidate_re2, candidate3):
                result3.append(merge(candidate_re2, candidate3))
    print(result3)
    print(len(result3))
    for result in result3:
        print(result)

    # result = make_final_candidates([], all_candidates, 1)
    # print(result)
    return 0

baseball = [[123,1,1],[356,1,0],[327,2,0],[489,0,1]]
solution(baseball)

# strike_combination else 부분
# strike_use = list(itertools.combinations(separated_num,strike))
# left_num = []
# print(separated_num)
# print(strike_use)
# for strike in strike_use:
#     strikes = list(strike)
#     copied_num = separated_num[:]
#     for case in strikes:
#         copied_num.remove(case)
#         left_num.append(copied_num)
# print(left_num)
